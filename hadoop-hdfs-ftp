#!/bin/bash
#
#
# Starts a Hadoop ftp
#
# chkconfig: 345 85 15
# description: Hadoop ftp
#
### BEGIN INIT INFO
# Provides:          hadoop-hdfs-ftp
# Short-Description: Hadoop ftp
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:
# Should-Stop:
### END INIT INFO

. /lib/lsb/init-functions
BIGTOP_DEFAULTS_DIR=${BIGTOP_DEFAULTS_DIR-/etc/default}
[ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/hadoop ] && . ${BIGTOP_DEFAULTS_DIR}/hadoop
[ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/hadoop-hdfs-ftp ] && . ${BIGTOP_DEFAULTS_DIR}/hadoop-hdfs-zkfc

# Autodetect JAVA_HOME if not defined
. /usr/lib/bigtop-utils/bigtop-detect-javahome

RETVAL_SUCCESS=0

STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_DEAD_AND_LOCK=2
STATUS_NOT_RUNNING=3
STATUS_OTHER_ERROR=102


ERROR_PROGRAM_NOT_INSTALLED=5
ERROR_PROGRAM_NOT_CONFIGURED=6


RETVAL=0
SLEEP_TIME=3
PROC_NAME="java"

DAEMON="hadoop-hdfs-ftp"
DESC="hadoop-hdfs-ftp"
#EXEC_PATH="/usr/lib/hadoop/sbin/hadoop-hdfs-ftp.sh"
SVC_USER="hdfs"
#DAEMON_FLAGS="ftp"
CONF_DIR="/etc/hadoop/conf"
PIDFILE="/var/run/hadoop-hdfs/hadoop-hdfs-ftp.pid"
LOCKDIR="/var/lock/subsys"
LOCKFILE="$LOCKDIR/hadoop-hdfs-ftp"
WORKING_DIR="/var/lib/hadoop-hdfs"
HADOOP_LIBEXEC_DIR="/usr/lib/hadoop/libexec"
HADOOP_STOP_TIMEOUT=${HADOOP_STOP_TIMEOUT:-3}

PORT=21
USER_CONFIG="/usr/local/hdfs-ftp/user.properties"
MAX_THREAD_NUM=600
MAX_LOGIN_USER=100


usage="Usage: $DAEMON (start|stop|status|restart|try-restart|condrestart|try-restart)"

# hadoop-hdfs-ftp
CLASS="com.hunantv.hadoop.ftp.HdfsFtpServer"
JAVA_CMD="$JAVA_HOME/jre/bin/java"
OUT_LOG="/var/log/hdfs/$DAEMON.log"

if [ $# -lt 0 ]; then
  echo $usage
  exit 1
fi

install -d -m 0755 -o hdfs -g hdfs /var/run/hadoop-hdfs 1>/dev/null 2>&1 || :
[ -d "$LOCKDIR" ] || install -d -m 0755 $LOCKDIR 1>/dev/null 2>&1 || :

start() {
  #[ -x $EXEC_PATH ] || exit $ERROR_PROGRAM_NOT_INSTALLED
  [ -d $CONF_DIR ] || exit $ERROR_PROGRAM_NOT_CONFIGURED
  echo "Starting ${DESC}..."

  . $HADOOP_LIBEXEC_DIR/hadoop-config.sh


  #check the process is running?
  checkstatusofproc
  status=$?

  case "$status" in
    $STATUS_RUNNING)
      log_warning_msg $DAEMON running as process `cat $PIDFILE`.  Stop it first.
      exit 1;
      ;;
  esac


  $JAVA_CMD ${JAVA_OPTS} -cp $CLASSPATH:/usr/local/hdfs-ftp/lib/* ${CLASS} -p $PORT -u $USER_CONFIG -t $MAX_THREAD_NUM -l $MAX_LOGIN_USER &>> $OUT_LOG & echo $! > $PIDFILE

  #su -s /bin/bash $SVC_USER -c "cd $WORKING_DIR && $EXEC_PATH --config '$CONF_DIR' start $DAEMON_FLAGS"

  # Some processes are slow to start
  sleep $SLEEP_TIME
  checkstatusofproc
  RETVAL=$?
  [ $RETVAL -eq $RETVAL_SUCCESS ] && touch $LOCKFILE

   case "$RETVAL" in
    $STATUS_RUNNING)
      log_success_msg "${DESC} is started"
      ;;
    $STATUS_DEAD)
      log_failure_msg "${DESC} start failed"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_failure_msg "${DESC} is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_failure_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $RETVAL
}


stop() {
  if [ -f $PIDFILE ]; then
      TARGET_PID=`cat $PIDFILE`
      if kill -0 $TARGET_PID > /dev/null 2>&1; then
        echo "Stopping $DESC..."
        kill $TARGET_PID
        rm -f $LOCKFILE $PIDFILE

        sleep $HADOOP_STOP_TIMEOUT
        if kill -0 $TARGET_PID > /dev/null 2>&1; then
          echo "$DESC did not stop gracefully after $HADOOP_STOP_TIMEOUT seconds: killing with kill -9"
          kill -9 $TARGET_PID
          log_success_msg "Stop ${DESC} success "
        else
          log_success_msg "Stop ${DESC} success "
        fi 

      else
        log_success_msg "No $DESC to stop"
      fi
  else
      log_success_msg "No $DESC to stop"
  fi
}

restart() {
  stop
  start
}

checkstatusofproc(){
  pidofproc -p $PIDFILE $PROC_NAME > /dev/null
}

checkstatus(){
  checkstatusofproc
  status=$?

  case "$status" in
    $STATUS_RUNNING)
      log_success_msg "${DESC} is running"
      ;;
    $STATUS_DEAD)
      log_warning_msg "${DESC} is dead and pid file exists"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_warning_msg "${DESC} is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_warning_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $status
}

condrestart(){
  [ -e $LOCKFILE ] && restart || :
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      start
      ;;
    stop)
      check_for_root
      stop
      ;;
    status)
      checkstatus
      RETVAL=$?
      ;;
    restart)
      check_for_root
      restart
      ;;
    condrestart|try-restart)
      check_for_root
      condrestart
      ;;
    *)
      echo $usage
      exit 1
  esac
}

service "$@"

exit $RETVAL
